// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.4.0
// - protoc             v5.28.0
// source: a_study_in_history.proto

package gen

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.62.0 or later.
const _ = grpc.SupportPackageIsVersion8

const (
	AStudyInHistory_Import_FullMethodName           = "/daemon.AStudyInHistory/Import"
	AStudyInHistory_ResynchronizeFor_FullMethodName = "/daemon.AStudyInHistory/ResynchronizeFor"
	AStudyInHistory_GetEventsFor_FullMethodName     = "/daemon.AStudyInHistory/GetEventsFor"
)

// AStudyInHistoryClient is the client API for AStudyInHistory service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type AStudyInHistoryClient interface {
	Import(ctx context.Context, in *ImportRequest, opts ...grpc.CallOption) (*ImportResponse, error)
	ResynchronizeFor(ctx context.Context, in *ResynchronizeForRequest, opts ...grpc.CallOption) (*ResynchronizeForResponse, error)
	GetEventsFor(ctx context.Context, in *GetEventsRequest, opts ...grpc.CallOption) (*GetEventsResponse, error)
}

type aStudyInHistoryClient struct {
	cc grpc.ClientConnInterface
}

func NewAStudyInHistoryClient(cc grpc.ClientConnInterface) AStudyInHistoryClient {
	return &aStudyInHistoryClient{cc}
}

func (c *aStudyInHistoryClient) Import(ctx context.Context, in *ImportRequest, opts ...grpc.CallOption) (*ImportResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ImportResponse)
	err := c.cc.Invoke(ctx, AStudyInHistory_Import_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *aStudyInHistoryClient) ResynchronizeFor(ctx context.Context, in *ResynchronizeForRequest, opts ...grpc.CallOption) (*ResynchronizeForResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ResynchronizeForResponse)
	err := c.cc.Invoke(ctx, AStudyInHistory_ResynchronizeFor_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *aStudyInHistoryClient) GetEventsFor(ctx context.Context, in *GetEventsRequest, opts ...grpc.CallOption) (*GetEventsResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetEventsResponse)
	err := c.cc.Invoke(ctx, AStudyInHistory_GetEventsFor_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// AStudyInHistoryServer is the server API for AStudyInHistory service.
// All implementations must embed UnimplementedAStudyInHistoryServer
// for forward compatibility
type AStudyInHistoryServer interface {
	Import(context.Context, *ImportRequest) (*ImportResponse, error)
	ResynchronizeFor(context.Context, *ResynchronizeForRequest) (*ResynchronizeForResponse, error)
	GetEventsFor(context.Context, *GetEventsRequest) (*GetEventsResponse, error)
	mustEmbedUnimplementedAStudyInHistoryServer()
}

// UnimplementedAStudyInHistoryServer must be embedded to have forward compatible implementations.
type UnimplementedAStudyInHistoryServer struct {
}

func (UnimplementedAStudyInHistoryServer) Import(context.Context, *ImportRequest) (*ImportResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Import not implemented")
}
func (UnimplementedAStudyInHistoryServer) ResynchronizeFor(context.Context, *ResynchronizeForRequest) (*ResynchronizeForResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ResynchronizeFor not implemented")
}
func (UnimplementedAStudyInHistoryServer) GetEventsFor(context.Context, *GetEventsRequest) (*GetEventsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetEventsFor not implemented")
}
func (UnimplementedAStudyInHistoryServer) mustEmbedUnimplementedAStudyInHistoryServer() {}

// UnsafeAStudyInHistoryServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to AStudyInHistoryServer will
// result in compilation errors.
type UnsafeAStudyInHistoryServer interface {
	mustEmbedUnimplementedAStudyInHistoryServer()
}

func RegisterAStudyInHistoryServer(s grpc.ServiceRegistrar, srv AStudyInHistoryServer) {
	s.RegisterService(&AStudyInHistory_ServiceDesc, srv)
}

func _AStudyInHistory_Import_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ImportRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AStudyInHistoryServer).Import(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AStudyInHistory_Import_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AStudyInHistoryServer).Import(ctx, req.(*ImportRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AStudyInHistory_ResynchronizeFor_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ResynchronizeForRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AStudyInHistoryServer).ResynchronizeFor(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AStudyInHistory_ResynchronizeFor_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AStudyInHistoryServer).ResynchronizeFor(ctx, req.(*ResynchronizeForRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AStudyInHistory_GetEventsFor_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetEventsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AStudyInHistoryServer).GetEventsFor(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AStudyInHistory_GetEventsFor_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AStudyInHistoryServer).GetEventsFor(ctx, req.(*GetEventsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// AStudyInHistory_ServiceDesc is the grpc.ServiceDesc for AStudyInHistory service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var AStudyInHistory_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "daemon.AStudyInHistory",
	HandlerType: (*AStudyInHistoryServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Import",
			Handler:    _AStudyInHistory_Import_Handler,
		},
		{
			MethodName: "ResynchronizeFor",
			Handler:    _AStudyInHistory_ResynchronizeFor_Handler,
		},
		{
			MethodName: "GetEventsFor",
			Handler:    _AStudyInHistory_GetEventsFor_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "a_study_in_history.proto",
}
